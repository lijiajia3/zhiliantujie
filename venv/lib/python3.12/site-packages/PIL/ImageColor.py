

















from __future__ import annotations

import re
from functools import lru_cache

from . import Image


@lru_cache
def getrgb(color: str) -> tuple[int, int, int] | tuple[int, int, int, int]:
    
    if len(color) > 100:
        msg = "color specifier is too long"
        raise ValueError(msg)
    color = color.lower()

    rgb = colormap.get(color, None)
    if rgb:
        if isinstance(rgb, tuple):
            return rgb
        rgb_tuple = getrgb(rgb)
        assert len(rgb_tuple) == 3
        colormap[color] = rgb_tuple
        return rgb_tuple

    
    if re.match("
        return int(color[1] * 2, 16), int(color[2] * 2, 16), int(color[3] * 2, 16)

    if re.match("
        return (
            int(color[1] * 2, 16),
            int(color[2] * 2, 16),
            int(color[3] * 2, 16),
            int(color[4] * 2, 16),
        )

    if re.match("
        return int(color[1:3], 16), int(color[3:5], 16), int(color[5:7], 16)

    if re.match("
        return (
            int(color[1:3], 16),
            int(color[3:5], 16),
            int(color[5:7], 16),
            int(color[7:9], 16),
        )

    m = re.match(r"rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$", color)
    if m:
        return int(m.group(1)), int(m.group(2)), int(m.group(3))

    m = re.match(r"rgb\(\s*(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*\)$", color)
    if m:
        return (
            int((int(m.group(1)) * 255) / 100.0 + 0.5),
            int((int(m.group(2)) * 255) / 100.0 + 0.5),
            int((int(m.group(3)) * 255) / 100.0 + 0.5),
        )

    m = re.match(
        r"hsl\(\s*(\d+\.?\d*)\s*,\s*(\d+\.?\d*)%\s*,\s*(\d+\.?\d*)%\s*\)$", color
    )
    if m:
        from colorsys import hls_to_rgb

        rgb_floats = hls_to_rgb(
            float(m.group(1)) / 360.0,
            float(m.group(3)) / 100.0,
            float(m.group(2)) / 100.0,
        )
        return (
            int(rgb_floats[0] * 255 + 0.5),
            int(rgb_floats[1] * 255 + 0.5),
            int(rgb_floats[2] * 255 + 0.5),
        )

    m = re.match(
        r"hs[bv]\(\s*(\d+\.?\d*)\s*,\s*(\d+\.?\d*)%\s*,\s*(\d+\.?\d*)%\s*\)$", color
    )
    if m:
        from colorsys import hsv_to_rgb

        rgb_floats = hsv_to_rgb(
            float(m.group(1)) / 360.0,
            float(m.group(2)) / 100.0,
            float(m.group(3)) / 100.0,
        )
        return (
            int(rgb_floats[0] * 255 + 0.5),
            int(rgb_floats[1] * 255 + 0.5),
            int(rgb_floats[2] * 255 + 0.5),
        )

    m = re.match(r"rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$", color)
    if m:
        return int(m.group(1)), int(m.group(2)), int(m.group(3)), int(m.group(4))
    msg = f"unknown color specifier: {repr(color)}"
    raise ValueError(msg)


@lru_cache
def getcolor(color: str, mode: str) -> int | tuple[int, ...]:
    
    
    rgb, alpha = getrgb(color), 255
    if len(rgb) == 4:
        alpha = rgb[3]
        rgb = rgb[:3]

    if mode == "HSV":
        from colorsys import rgb_to_hsv

        r, g, b = rgb
        h, s, v = rgb_to_hsv(r / 255, g / 255, b / 255)
        return int(h * 255), int(s * 255), int(v * 255)
    elif Image.getmodebase(mode) == "L":
        r, g, b = rgb
        
        
        graylevel = (r * 19595 + g * 38470 + b * 7471 + 0x8000) >> 16
        if mode[-1] == "A":
            return graylevel, alpha
        return graylevel
    elif mode[-1] == "A":
        return rgb + (alpha,)
    return rgb


colormap: dict[str, str | tuple[int, int, int]] = {
    
    
    
    "aliceblue": "
    "antiquewhite": "
    "aqua": "
    "aquamarine": "
    "azure": "
    "beige": "
    "bisque": "
    "black": "
    "blanchedalmond": "
    "blue": "
    "blueviolet": "
    "brown": "
    "burlywood": "
    "cadetblue": "
    "chartreuse": "
    "chocolate": "
    "coral": "
    "cornflowerblue": "
    "cornsilk": "
    "crimson": "
    "cyan": "
    "darkblue": "
    "darkcyan": "
    "darkgoldenrod": "
    "darkgray": "
    "darkgrey": "
    "darkgreen": "
    "darkkhaki": "
    "darkmagenta": "
    "darkolivegreen": "
    "darkorange": "
    "darkorchid": "
    "darkred": "
    "darksalmon": "
    "darkseagreen": "
    "darkslateblue": "
    "darkslategray": "
    "darkslategrey": "
    "darkturquoise": "
    "darkviolet": "
    "deeppink": "
    "deepskyblue": "
    "dimgray": "
    "dimgrey": "
    "dodgerblue": "
    "firebrick": "
    "floralwhite": "
    "forestgreen": "
    "fuchsia": "
    "gainsboro": "
    "ghostwhite": "
    "gold": "
    "goldenrod": "
    "gray": "
    "grey": "
    "green": "
    "greenyellow": "
    "honeydew": "
    "hotpink": "
    "indianred": "
    "indigo": "
    "ivory": "
    "khaki": "
    "lavender": "
    "lavenderblush": "
    "lawngreen": "
    "lemonchiffon": "
    "lightblue": "
    "lightcoral": "
    "lightcyan": "
    "lightgoldenrodyellow": "
    "lightgreen": "
    "lightgray": "
    "lightgrey": "
    "lightpink": "
    "lightsalmon": "
    "lightseagreen": "
    "lightskyblue": "
    "lightslategray": "
    "lightslategrey": "
    "lightsteelblue": "
    "lightyellow": "
    "lime": "
    "limegreen": "
    "linen": "
    "magenta": "
    "maroon": "
    "mediumaquamarine": "
    "mediumblue": "
    "mediumorchid": "
    "mediumpurple": "
    "mediumseagreen": "
    "mediumslateblue": "
    "mediumspringgreen": "
    "mediumturquoise": "
    "mediumvioletred": "
    "midnightblue": "
    "mintcream": "
    "mistyrose": "
    "moccasin": "
    "navajowhite": "
    "navy": "
    "oldlace": "
    "olive": "
    "olivedrab": "
    "orange": "
    "orangered": "
    "orchid": "
    "palegoldenrod": "
    "palegreen": "
    "paleturquoise": "
    "palevioletred": "
    "papayawhip": "
    "peachpuff": "
    "peru": "
    "pink": "
    "plum": "
    "powderblue": "
    "purple": "
    "rebeccapurple": "
    "red": "
    "rosybrown": "
    "royalblue": "
    "saddlebrown": "
    "salmon": "
    "sandybrown": "
    "seagreen": "
    "seashell": "
    "sienna": "
    "silver": "
    "skyblue": "
    "slateblue": "
    "slategray": "
    "slategrey": "
    "snow": "
    "springgreen": "
    "steelblue": "
    "tan": "
    "teal": "
    "thistle": "
    "tomato": "
    "turquoise": "
    "violet": "
    "wheat": "
    "white": "
    "whitesmoke": "
    "yellow": "
    "yellowgreen": "
}
