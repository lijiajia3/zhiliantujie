













from __future__ import annotations

from collections.abc import Sequence
from typing import Any

from . import Image


class Transform(Image.ImageTransformHandler):
    

    method: Image.Transform

    def __init__(self, data: Sequence[Any]) -> None:
        self.data = data

    def getdata(self) -> tuple[Image.Transform, Sequence[int]]:
        return self.method, self.data

    def transform(
        self,
        size: tuple[int, int],
        image: Image.Image,
        **options: Any,
    ) -> Image.Image:
        
        
        method, data = self.getdata()
        return image.transform(size, method, data, **options)


class AffineTransform(Transform):
    

    method = Image.Transform.AFFINE


class PerspectiveTransform(Transform):
    

    method = Image.Transform.PERSPECTIVE


class ExtentTransform(Transform):
    

    method = Image.Transform.EXTENT


class QuadTransform(Transform):
    

    method = Image.Transform.QUAD


class MeshTransform(Transform):
    

    method = Image.Transform.MESH
