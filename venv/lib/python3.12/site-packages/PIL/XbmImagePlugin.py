



















from __future__ import annotations

import re
from typing import IO

from . import Image, ImageFile


xbm_head = re.compile(
    rb"\s*
    b"
    b"(?P<hotspot>"
    b"
    b"
    b")?"
    rb"[\000-\377]*_bits\[]"
)


def _accept(prefix: bytes) -> bool:
    return prefix.lstrip()[:7] == b"






class XbmImageFile(ImageFile.ImageFile):
    format = "XBM"
    format_description = "X11 Bitmap"

    def _open(self) -> None:
        assert self.fp is not None

        m = xbm_head.match(self.fp.read(512))

        if not m:
            msg = "not a XBM file"
            raise SyntaxError(msg)

        xsize = int(m.group("width"))
        ysize = int(m.group("height"))

        if m.group("hotspot"):
            self.info["hotspot"] = (int(m.group("xhot")), int(m.group("yhot")))

        self._mode = "1"
        self._size = xsize, ysize

        self.tile = [ImageFile._Tile("xbm", (0, 0) + self.size, m.end())]


def _save(im: Image.Image, fp: IO[bytes], filename: str | bytes) -> None:
    if im.mode != "1":
        msg = f"cannot write mode {im.mode} as XBM"
        raise OSError(msg)

    fp.write(f"
    fp.write(f"

    hotspot = im.encoderinfo.get("hotspot")
    if hotspot:
        fp.write(f"
        fp.write(f"

    fp.write(b"static char im_bits[] = {\n")

    ImageFile._save(im, fp, [ImageFile._Tile("xbm", (0, 0) + im.size)])

    fp.write(b"};\n")


Image.register_open(XbmImageFile.format, XbmImageFile, _accept)
Image.register_save(XbmImageFile.format, _save)

Image.register_extension(XbmImageFile.format, ".xbm")

Image.register_mime(XbmImageFile.format, "image/xbm")
