from __future__ import annotations

from abc import abstractmethod
from signal import Signals

from ._resources import AsyncResource
from ._streams import ByteReceiveStream, ByteSendStream


class Process(AsyncResource):
    

    @abstractmethod
    async def wait(self) -> int:
        

    @abstractmethod
    def terminate(self) -> None:
        

    @abstractmethod
    def kill(self) -> None:
        

    @abstractmethod
    def send_signal(self, signal: Signals) -> None:
        

    @property
    @abstractmethod
    def pid(self) -> int:
        

    @property
    @abstractmethod
    def returncode(self) -> int | None:
        

    @property
    @abstractmethod
    def stdin(self) -> ByteSendStream | None:
        

    @property
    @abstractmethod
    def stdout(self) -> ByteReceiveStream | None:
        

    @property
    @abstractmethod
    def stderr(self) -> ByteReceiveStream | None:
        
