



from __future__ import annotations

import abc

from cryptography import utils





class CipherAlgorithm(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def name(self) -> str:
        

    @property
    @abc.abstractmethod
    def key_sizes(self) -> frozenset[int]:
        

    @property
    @abc.abstractmethod
    def key_size(self) -> int:
        


class BlockCipherAlgorithm(CipherAlgorithm):
    key: bytes

    @property
    @abc.abstractmethod
    def block_size(self) -> int:
        


def _verify_key_size(algorithm: CipherAlgorithm, key: bytes) -> bytes:
    
    utils._check_byteslike("key", key)

    
    if len(key) * 8 not in algorithm.key_sizes:
        raise ValueError(
            f"Invalid key size ({len(key) * 8}) for {algorithm.name}."
        )
    return key
