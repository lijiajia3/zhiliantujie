



from __future__ import annotations

import abc

from cryptography.hazmat.bindings._rust import openssl as rust_openssl
from cryptography.hazmat.primitives import _serialization

generate_parameters = rust_openssl.dh.generate_parameters


DHPrivateNumbers = rust_openssl.dh.DHPrivateNumbers
DHPublicNumbers = rust_openssl.dh.DHPublicNumbers
DHParameterNumbers = rust_openssl.dh.DHParameterNumbers


class DHParameters(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def generate_private_key(self) -> DHPrivateKey:
        

    @abc.abstractmethod
    def parameter_bytes(
        self,
        encoding: _serialization.Encoding,
        format: _serialization.ParameterFormat,
    ) -> bytes:
        

    @abc.abstractmethod
    def parameter_numbers(self) -> DHParameterNumbers:
        


DHParametersWithSerialization = DHParameters
DHParameters.register(rust_openssl.dh.DHParameters)


class DHPublicKey(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def key_size(self) -> int:
        

    @abc.abstractmethod
    def parameters(self) -> DHParameters:
        

    @abc.abstractmethod
    def public_numbers(self) -> DHPublicNumbers:
        

    @abc.abstractmethod
    def public_bytes(
        self,
        encoding: _serialization.Encoding,
        format: _serialization.PublicFormat,
    ) -> bytes:
        

    @abc.abstractmethod
    def __eq__(self, other: object) -> bool:
        


DHPublicKeyWithSerialization = DHPublicKey
DHPublicKey.register(rust_openssl.dh.DHPublicKey)


class DHPrivateKey(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def key_size(self) -> int:
        

    @abc.abstractmethod
    def public_key(self) -> DHPublicKey:
        

    @abc.abstractmethod
    def parameters(self) -> DHParameters:
        

    @abc.abstractmethod
    def exchange(self, peer_public_key: DHPublicKey) -> bytes:
        

    @abc.abstractmethod
    def private_numbers(self) -> DHPrivateNumbers:
        

    @abc.abstractmethod
    def private_bytes(
        self,
        encoding: _serialization.Encoding,
        format: _serialization.PrivateFormat,
        encryption_algorithm: _serialization.KeySerializationEncryption,
    ) -> bytes:
        


DHPrivateKeyWithSerialization = DHPrivateKey
DHPrivateKey.register(rust_openssl.dh.DHPrivateKey)
