



from __future__ import annotations

import abc
import typing

from cryptography.hazmat.bindings._rust import openssl as rust_openssl
from cryptography.hazmat.primitives import _serialization, hashes
from cryptography.hazmat.primitives.asymmetric import utils as asym_utils


class DSAParameters(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def generate_private_key(self) -> DSAPrivateKey:
        

    @abc.abstractmethod
    def parameter_numbers(self) -> DSAParameterNumbers:
        


DSAParametersWithNumbers = DSAParameters
DSAParameters.register(rust_openssl.dsa.DSAParameters)


class DSAPrivateKey(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def key_size(self) -> int:
        

    @abc.abstractmethod
    def public_key(self) -> DSAPublicKey:
        

    @abc.abstractmethod
    def parameters(self) -> DSAParameters:
        

    @abc.abstractmethod
    def sign(
        self,
        data: bytes,
        algorithm: asym_utils.Prehashed | hashes.HashAlgorithm,
    ) -> bytes:
        

    @abc.abstractmethod
    def private_numbers(self) -> DSAPrivateNumbers:
        

    @abc.abstractmethod
    def private_bytes(
        self,
        encoding: _serialization.Encoding,
        format: _serialization.PrivateFormat,
        encryption_algorithm: _serialization.KeySerializationEncryption,
    ) -> bytes:
        


DSAPrivateKeyWithSerialization = DSAPrivateKey
DSAPrivateKey.register(rust_openssl.dsa.DSAPrivateKey)


class DSAPublicKey(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def key_size(self) -> int:
        

    @abc.abstractmethod
    def parameters(self) -> DSAParameters:
        

    @abc.abstractmethod
    def public_numbers(self) -> DSAPublicNumbers:
        

    @abc.abstractmethod
    def public_bytes(
        self,
        encoding: _serialization.Encoding,
        format: _serialization.PublicFormat,
    ) -> bytes:
        

    @abc.abstractmethod
    def verify(
        self,
        signature: bytes,
        data: bytes,
        algorithm: asym_utils.Prehashed | hashes.HashAlgorithm,
    ) -> None:
        

    @abc.abstractmethod
    def __eq__(self, other: object) -> bool:
        


DSAPublicKeyWithSerialization = DSAPublicKey
DSAPublicKey.register(rust_openssl.dsa.DSAPublicKey)

DSAPrivateNumbers = rust_openssl.dsa.DSAPrivateNumbers
DSAPublicNumbers = rust_openssl.dsa.DSAPublicNumbers
DSAParameterNumbers = rust_openssl.dsa.DSAParameterNumbers


def generate_parameters(
    key_size: int, backend: typing.Any = None
) -> DSAParameters:
    if key_size not in (1024, 2048, 3072, 4096):
        raise ValueError("Key size must be 1024, 2048, 3072, or 4096 bits.")

    return rust_openssl.dsa.generate_parameters(key_size)


def generate_private_key(
    key_size: int, backend: typing.Any = None
) -> DSAPrivateKey:
    parameters = generate_parameters(key_size)
    return parameters.generate_private_key()
