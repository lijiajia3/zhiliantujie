
import sys
import os
from numpy._core import dtype
from numpy._core import numerictypes as _numerictypes
from numpy._core.function_base import add_newdoc







def numeric_type_aliases(aliases):
    def type_aliases_gen():
        for alias, doc in aliases:
            try:
                alias_type = getattr(_numerictypes, alias)
            except AttributeError:
                
                pass
            else:
                yield (alias_type, alias, doc)
    return list(type_aliases_gen())


possible_aliases = numeric_type_aliases([
    ('int8', '8-bit signed integer (``-128`` to ``127``)'),
    ('int16', '16-bit signed integer (``-32_768`` to ``32_767``)'),
    ('int32', '32-bit signed integer (``-2_147_483_648`` to ``2_147_483_647``)'),
    ('int64', '64-bit signed integer (``-9_223_372_036_854_775_808`` to ``9_223_372_036_854_775_807``)'),
    ('intp', 'Signed integer large enough to fit pointer, compatible with C ``intptr_t``'),
    ('uint8', '8-bit unsigned integer (``0`` to ``255``)'),
    ('uint16', '16-bit unsigned integer (``0`` to ``65_535``)'),
    ('uint32', '32-bit unsigned integer (``0`` to ``4_294_967_295``)'),
    ('uint64', '64-bit unsigned integer (``0`` to ``18_446_744_073_709_551_615``)'),
    ('uintp', 'Unsigned integer large enough to fit pointer, compatible with C ``uintptr_t``'),
    ('float16', '16-bit-precision floating-point number type: sign bit, 5 bits exponent, 10 bits mantissa'),
    ('float32', '32-bit-precision floating-point number type: sign bit, 8 bits exponent, 23 bits mantissa'),
    ('float64', '64-bit precision floating-point number type: sign bit, 11 bits exponent, 52 bits mantissa'),
    ('float96', '96-bit extended-precision floating-point number type'),
    ('float128', '128-bit extended-precision floating-point number type'),
    ('complex64', 'Complex number type composed of 2 32-bit-precision floating-point numbers'),
    ('complex128', 'Complex number type composed of 2 64-bit-precision floating-point numbers'),
    ('complex192', 'Complex number type composed of 2 96-bit extended-precision floating-point numbers'),
    ('complex256', 'Complex number type composed of 2 128-bit extended-precision floating-point numbers'),
    ])


def _get_platform_and_machine():
    try:
        system, _, _, _, machine = os.uname()
    except AttributeError:
        system = sys.platform
        if system == 'win32':
            machine = os.environ.get('PROCESSOR_ARCHITEW6432', '') \
                    or os.environ.get('PROCESSOR_ARCHITECTURE', '')
        else:
            machine = 'unknown'
    return system, machine


_system, _machine = _get_platform_and_machine()
_doc_alias_string = f":Alias on this platform ({_system} {_machine}):"


def add_newdoc_for_scalar_type(obj, fixed_aliases, doc):
    
    o = getattr(_numerictypes, obj)

    character_code = dtype(o).char
    canonical_name_doc = "" if obj == o.__name__ else \
                        f":Canonical name: `numpy.{obj}`\n    "
    if fixed_aliases:
        alias_doc = ''.join(f":Alias: `numpy.{alias}`\n    "
                            for alias in fixed_aliases)
    else:
        alias_doc = ''
    alias_doc += ''.join(f"{_doc_alias_string} `numpy.{alias}`: {doc}.\n    "
                         for (alias_type, alias, doc) in possible_aliases if alias_type is o)

    docstring = f

    add_newdoc('numpy._core.numerictypes', obj, docstring)


_bool_docstring = (
    
)

add_newdoc_for_scalar_type('bool', [], _bool_docstring)

add_newdoc_for_scalar_type('bool_', [], _bool_docstring)

add_newdoc_for_scalar_type('byte', [],
    )

add_newdoc_for_scalar_type('short', [],
    )

add_newdoc_for_scalar_type('intc', [],
    )



add_newdoc_for_scalar_type('int_', [],
    )

add_newdoc_for_scalar_type('longlong', [],
    )

add_newdoc_for_scalar_type('ubyte', [],
    )

add_newdoc_for_scalar_type('ushort', [],
    )

add_newdoc_for_scalar_type('uintc', [],
    )

add_newdoc_for_scalar_type('uint', [],
    )

add_newdoc_for_scalar_type('ulonglong', [],
    )

add_newdoc_for_scalar_type('half', [],
    )

add_newdoc_for_scalar_type('single', [],
    )

add_newdoc_for_scalar_type('double', [],
    )

add_newdoc_for_scalar_type('longdouble', [],
    )

add_newdoc_for_scalar_type('csingle', [],
    )

add_newdoc_for_scalar_type('cdouble', [],
    )

add_newdoc_for_scalar_type('clongdouble', [],
    )

add_newdoc_for_scalar_type('object_', [],
    )

add_newdoc_for_scalar_type('str_', [],
    r)

add_newdoc_for_scalar_type('bytes_', [],
    r)

add_newdoc_for_scalar_type('void', [],
    r)

add_newdoc_for_scalar_type('datetime64', [],
    )

add_newdoc_for_scalar_type('timedelta64', [],
    )

add_newdoc('numpy._core.numerictypes', "integer", ('is_integer',
    ))


for float_name in ('half', 'single', 'double', 'longdouble'):
    add_newdoc('numpy._core.numerictypes', float_name, ('as_integer_ratio',
        .format(ftype=float_name)))

    add_newdoc('numpy._core.numerictypes', float_name, ('is_integer',
        f))

for int_name in ('int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32',
        'int64', 'uint64', 'int64', 'uint64', 'int64', 'uint64'):
    
    add_newdoc('numpy._core.numerictypes', int_name, ('bit_count',
        f +
        (f if dtype(int_name).char.islower() else "")))
