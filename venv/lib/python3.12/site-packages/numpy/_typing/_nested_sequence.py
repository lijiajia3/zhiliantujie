

from __future__ import annotations

from typing import (
    Any,
    TypeVar,
    Protocol,
    runtime_checkable,
    TYPE_CHECKING,
)

if TYPE_CHECKING:
    from collections.abc import Iterator

__all__ = ["_NestedSequence"]

_T_co = TypeVar("_T_co", covariant=True)


@runtime_checkable
class _NestedSequence(Protocol[_T_co]):
    

    def __len__(self, /) -> int:
        
        raise NotImplementedError

    def __getitem__(self, index: int, /) -> _T_co | _NestedSequence[_T_co]:
        
        raise NotImplementedError

    def __contains__(self, x: object, /) -> bool:
        
        raise NotImplementedError

    def __iter__(self, /) -> Iterator[_T_co | _NestedSequence[_T_co]]:
        
        raise NotImplementedError

    def __reversed__(self, /) -> Iterator[_T_co | _NestedSequence[_T_co]]:
        
        raise NotImplementedError

    def count(self, value: Any, /) -> int:
        
        raise NotImplementedError

    def index(self, value: Any, /) -> int:
        
        raise NotImplementedError
