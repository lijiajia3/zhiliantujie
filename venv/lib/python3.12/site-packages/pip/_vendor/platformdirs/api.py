

from __future__ import annotations

import os
from abc import ABC, abstractmethod
from pathlib import Path
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from typing import Iterator, Literal


class PlatformDirsABC(ABC):  
    

    def __init__(  
        self,
        appname: str | None = None,
        appauthor: str | None | Literal[False] = None,
        version: str | None = None,
        roaming: bool = False,  
        multipath: bool = False,  
        opinion: bool = True,  
        ensure_exists: bool = False,  
    ) -> None:
        
        self.appname = appname  
        self.appauthor = appauthor
        
        self.version = version
        
        self.roaming = roaming
        
        self.multipath = multipath
        
        self.opinion = opinion  
        self.ensure_exists = ensure_exists
        

    def _append_app_name_and_version(self, *base: str) -> str:
        params = list(base[1:])
        if self.appname:
            params.append(self.appname)
            if self.version:
                params.append(self.version)
        path = os.path.join(base[0], *params)  
        self._optionally_create_directory(path)
        return path

    def _optionally_create_directory(self, path: str) -> None:
        if self.ensure_exists:
            Path(path).mkdir(parents=True, exist_ok=True)

    def _first_item_as_path_if_multipath(self, directory: str) -> Path:
        if self.multipath:
            
            directory = directory.split(os.pathsep)[0]
        return Path(directory)

    @property
    @abstractmethod
    def user_data_dir(self) -> str:
        

    @property
    @abstractmethod
    def site_data_dir(self) -> str:
        

    @property
    @abstractmethod
    def user_config_dir(self) -> str:
        

    @property
    @abstractmethod
    def site_config_dir(self) -> str:
        

    @property
    @abstractmethod
    def user_cache_dir(self) -> str:
        

    @property
    @abstractmethod
    def site_cache_dir(self) -> str:
        

    @property
    @abstractmethod
    def user_state_dir(self) -> str:
        

    @property
    @abstractmethod
    def user_log_dir(self) -> str:
        

    @property
    @abstractmethod
    def user_documents_dir(self) -> str:
        

    @property
    @abstractmethod
    def user_downloads_dir(self) -> str:
        

    @property
    @abstractmethod
    def user_pictures_dir(self) -> str:
        

    @property
    @abstractmethod
    def user_videos_dir(self) -> str:
        

    @property
    @abstractmethod
    def user_music_dir(self) -> str:
        

    @property
    @abstractmethod
    def user_desktop_dir(self) -> str:
        

    @property
    @abstractmethod
    def user_runtime_dir(self) -> str:
        

    @property
    @abstractmethod
    def site_runtime_dir(self) -> str:
        

    @property
    def user_data_path(self) -> Path:
        
        return Path(self.user_data_dir)

    @property
    def site_data_path(self) -> Path:
        
        return Path(self.site_data_dir)

    @property
    def user_config_path(self) -> Path:
        
        return Path(self.user_config_dir)

    @property
    def site_config_path(self) -> Path:
        
        return Path(self.site_config_dir)

    @property
    def user_cache_path(self) -> Path:
        
        return Path(self.user_cache_dir)

    @property
    def site_cache_path(self) -> Path:
        
        return Path(self.site_cache_dir)

    @property
    def user_state_path(self) -> Path:
        
        return Path(self.user_state_dir)

    @property
    def user_log_path(self) -> Path:
        
        return Path(self.user_log_dir)

    @property
    def user_documents_path(self) -> Path:
        
        return Path(self.user_documents_dir)

    @property
    def user_downloads_path(self) -> Path:
        
        return Path(self.user_downloads_dir)

    @property
    def user_pictures_path(self) -> Path:
        
        return Path(self.user_pictures_dir)

    @property
    def user_videos_path(self) -> Path:
        
        return Path(self.user_videos_dir)

    @property
    def user_music_path(self) -> Path:
        
        return Path(self.user_music_dir)

    @property
    def user_desktop_path(self) -> Path:
        
        return Path(self.user_desktop_dir)

    @property
    def user_runtime_path(self) -> Path:
        
        return Path(self.user_runtime_dir)

    @property
    def site_runtime_path(self) -> Path:
        
        return Path(self.site_runtime_dir)

    def iter_config_dirs(self) -> Iterator[str]:
        
        yield self.user_config_dir
        yield self.site_config_dir

    def iter_data_dirs(self) -> Iterator[str]:
        
        yield self.user_data_dir
        yield self.site_data_dir

    def iter_cache_dirs(self) -> Iterator[str]:
        
        yield self.user_cache_dir
        yield self.site_cache_dir

    def iter_runtime_dirs(self) -> Iterator[str]:
        
        yield self.user_runtime_dir
        yield self.site_runtime_dir

    def iter_config_paths(self) -> Iterator[Path]:
        
        for path in self.iter_config_dirs():
            yield Path(path)

    def iter_data_paths(self) -> Iterator[Path]:
        
        for path in self.iter_data_dirs():
            yield Path(path)

    def iter_cache_paths(self) -> Iterator[Path]:
        
        for path in self.iter_cache_dirs():
            yield Path(path)

    def iter_runtime_paths(self) -> Iterator[Path]:
        
        for path in self.iter_runtime_dirs():
            yield Path(path)
