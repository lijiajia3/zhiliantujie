

from __future__ import annotations

import os.path
import sys
from typing import TYPE_CHECKING

from .api import PlatformDirsABC

if TYPE_CHECKING:
    from pathlib import Path


class MacOS(PlatformDirsABC):
    

    @property
    def user_data_dir(self) -> str:
        
        return self._append_app_name_and_version(os.path.expanduser("~/Library/Application Support"))  

    @property
    def site_data_dir(self) -> str:
        
        is_homebrew = sys.prefix.startswith("/opt/homebrew")
        path_list = [self._append_app_name_and_version("/opt/homebrew/share")] if is_homebrew else []
        path_list.append(self._append_app_name_and_version("/Library/Application Support"))
        if self.multipath:
            return os.pathsep.join(path_list)
        return path_list[0]

    @property
    def site_data_path(self) -> Path:
        
        return self._first_item_as_path_if_multipath(self.site_data_dir)

    @property
    def user_config_dir(self) -> str:
        
        return self.user_data_dir

    @property
    def site_config_dir(self) -> str:
        
        return self.site_data_dir

    @property
    def user_cache_dir(self) -> str:
        
        return self._append_app_name_and_version(os.path.expanduser("~/Library/Caches"))  

    @property
    def site_cache_dir(self) -> str:
        
        is_homebrew = sys.prefix.startswith("/opt/homebrew")
        path_list = [self._append_app_name_and_version("/opt/homebrew/var/cache")] if is_homebrew else []
        path_list.append(self._append_app_name_and_version("/Library/Caches"))
        if self.multipath:
            return os.pathsep.join(path_list)
        return path_list[0]

    @property
    def site_cache_path(self) -> Path:
        
        return self._first_item_as_path_if_multipath(self.site_cache_dir)

    @property
    def user_state_dir(self) -> str:
        
        return self.user_data_dir

    @property
    def user_log_dir(self) -> str:
        
        return self._append_app_name_and_version(os.path.expanduser("~/Library/Logs"))  

    @property
    def user_documents_dir(self) -> str:
        
        return os.path.expanduser("~/Documents")  

    @property
    def user_downloads_dir(self) -> str:
        
        return os.path.expanduser("~/Downloads")  

    @property
    def user_pictures_dir(self) -> str:
        
        return os.path.expanduser("~/Pictures")  

    @property
    def user_videos_dir(self) -> str:
        
        return os.path.expanduser("~/Movies")  

    @property
    def user_music_dir(self) -> str:
        
        return os.path.expanduser("~/Music")  

    @property
    def user_desktop_dir(self) -> str:
        
        return os.path.expanduser("~/Desktop")  

    @property
    def user_runtime_dir(self) -> str:
        
        return self._append_app_name_and_version(os.path.expanduser("~/Library/Caches/TemporaryItems"))  

    @property
    def site_runtime_dir(self) -> str:
        
        return self.user_runtime_dir


__all__ = [
    "MacOS",
]
