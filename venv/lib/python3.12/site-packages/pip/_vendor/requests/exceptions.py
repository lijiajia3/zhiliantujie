
from pip._vendor.urllib3.exceptions import HTTPError as BaseHTTPError

from .compat import JSONDecodeError as CompatJSONDecodeError


class RequestException(IOError):
    

    def __init__(self, *args, **kwargs):
        
        response = kwargs.pop("response", None)
        self.response = response
        self.request = kwargs.pop("request", None)
        if response is not None and not self.request and hasattr(response, "request"):
            self.request = self.response.request
        super().__init__(*args, **kwargs)


class InvalidJSONError(RequestException):
    


class JSONDecodeError(InvalidJSONError, CompatJSONDecodeError):
    

    def __init__(self, *args, **kwargs):
        
        CompatJSONDecodeError.__init__(self, *args)
        InvalidJSONError.__init__(self, *self.args, **kwargs)

    def __reduce__(self):
        
        return CompatJSONDecodeError.__reduce__(self)


class HTTPError(RequestException):
    


class ConnectionError(RequestException):
    


class ProxyError(ConnectionError):
    


class SSLError(ConnectionError):
    


class Timeout(RequestException):
    


class ConnectTimeout(ConnectionError, Timeout):
    


class ReadTimeout(Timeout):
    


class URLRequired(RequestException):
    


class TooManyRedirects(RequestException):
    


class MissingSchema(RequestException, ValueError):
    


class InvalidSchema(RequestException, ValueError):
    


class InvalidURL(RequestException, ValueError):
    


class InvalidHeader(RequestException, ValueError):
    


class InvalidProxyURL(InvalidURL):
    


class ChunkedEncodingError(RequestException):
    


class ContentDecodingError(RequestException, BaseHTTPError):
    


class StreamConsumedError(RequestException, TypeError):
    


class RetryError(RequestException):
    


class UnrewindableBodyError(RequestException):
    





class RequestsWarning(Warning):
    


class FileModeWarning(RequestsWarning, DeprecationWarning):
    


class RequestsDependencyWarning(RequestsWarning):
    
