class AbstractProvider(object):
    

    def identify(self, requirement_or_candidate):
        
        raise NotImplementedError

    def get_preference(
        self,
        identifier,
        resolutions,
        candidates,
        information,
        backtrack_causes,
    ):
        
        raise NotImplementedError

    def find_matches(self, identifier, requirements, incompatibilities):
        
        raise NotImplementedError

    def is_satisfied_by(self, requirement, candidate):
        
        raise NotImplementedError

    def get_dependencies(self, candidate):
        
        raise NotImplementedError


class AbstractResolver(object):
    

    base_exception = Exception

    def __init__(self, provider, reporter):
        self.provider = provider
        self.reporter = reporter

    def resolve(self, requirements, **kwargs):
        
        raise NotImplementedError
